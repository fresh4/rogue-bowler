[gd_scene load_steps=18 format=3 uid="uid://bn10afwxhar2c"]

[ext_resource type="Script" path="res://Scripts/level_manager.gd" id="1_sttxf"]
[ext_resource type="Texture2D" uid="uid://di0uduo7j2xgb" path="res://Assets/Textures/vaporwave-cross.png" id="2_1byhk"]
[ext_resource type="PackedScene" uid="uid://cu4nerdr6gtdq" path="res://Prefabs/player.tscn" id="2_ho05h"]
[ext_resource type="PackedScene" uid="uid://d0y8f0wlh3x2i" path="res://Prefabs/pin.tscn" id="3_d8a7j"]
[ext_resource type="Script" path="res://Scripts/ui_manager.gd" id="5_2gcxh"]
[ext_resource type="FontFile" uid="uid://cr0tpvb38ppxp" path="res://Assets/Fonts/Rocket Rinder.otf" id="6_vp3hc"]
[ext_resource type="MeshLibrary" uid="uid://dxb4y04fmy1u7" path="res://gridmap.tres" id="7_uebtx"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_x6owf"]
sky_top_color = Color(0.0627451, 0.027451, 0.129412, 1)
sky_horizon_color = Color(0.858824, 0.00392157, 0.447059, 1)
sky_curve = 0.121838
ground_bottom_color = Color(0.113725, 0, 0.168627, 1)
ground_horizon_color = Color(0.847059, 0, 0.509804, 1)
use_debanding = false

[sub_resource type="Sky" id="Sky_vsnrb"]
sky_material = SubResource("ProceduralSkyMaterial_x6owf")

[sub_resource type="Environment" id="Environment_mnx18"]
background_mode = 2
sky = SubResource("Sky_vsnrb")
glow_enabled = true
fog_enabled = true
fog_light_color = Color(0.129412, 0, 0.172549, 1)
fog_density = 0.04
adjustment_enabled = true
adjustment_saturation = 1.25

[sub_resource type="Shader" id="Shader_v5h8p"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_add, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

// COMPATIBILITY_DEFINES - This code block is added and removed by the editor, do not modify it.
// This is added automatically when in compatibility mode. It is not required for Mobile or Forward+.
#define IS_COMPATIBILITY
#define fma(a, b, c) (a) * (b) + (c)
#define dFdxCoarse(a) dFdx(a)
#define dFdyCoarse(a) dFdy(a)
#define textureQueryLod(a, b) vec4(0.0)
#define texelOffset(b, c) ivec3(ivec2(b.xy * _region_size + c - 0.4979), int(b.z))
#define textureGather(a, b) vec4( \\
    texelFetch(a, texelOffset(b, vec2(0,1)), 0).r, \\
    texelFetch(a, texelOffset(b, vec2(1,1)), 0).r, \\
    texelFetch(a, texelOffset(b, vec2(1,0)), 0).r, \\
    texelFetch(a, texelOffset(b, vec2(0,0)), 0).r  \\
)
// END_COMPAT_DEFINES

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap_anisotropic, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap_anisotropic, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap_anisotropic, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_emission : source_color, hint_default_black, filter_linear_mipmap_anisotropic, repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy : hint_range(0.0, 100.0, 0.01);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Emission: Enabled
	vec3 emission_tex = triplanar_texture(texture_emission, uv1_power_normal, uv1_triplanar_pos).rgb;
	// Emission Operator: Add
	EMISSION = (emission.rgb + emission_tex) * emission_energy;
	ALPHA *= albedo.a * albedo_tex.a;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_85ufv"]
render_priority = 0
shader = SubResource("Shader_v5h8p")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/emission = Color(0.556689, 0.265198, 0.617188, 1)
shader_parameter/emission_energy = 3.5
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("2_1byhk")

[sub_resource type="PlaneMesh" id="PlaneMesh_j40xo"]
size = Vector2(1000, 1000)

[sub_resource type="ConvexPolygonShape3D" id="ConvexPolygonShape3D_70m37"]
points = PackedVector3Array(-500, 0, -500, -500, 0, 500, 500, 0, -500, 500, 0, 500)

[sub_resource type="Theme" id="Theme_vgjns"]
Label/colors/font_shadow_color = Color(0.701961, 0.254902, 0.827451, 1)
Label/fonts/font = ExtResource("6_vp3hc")

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_pic8n"]
bg_color = Color(0.702, 0.255, 0.827, 0.184)
corner_radius_top_left = 10
corner_radius_top_right = 10
corner_radius_bottom_right = 10
corner_radius_bottom_left = 10

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_dnylh"]
bg_color = Color(0.702875, 0.255554, 0.828125, 1)
skew = Vector2(0.3, 0)
corner_radius_top_left = 10
corner_radius_top_right = 10
corner_radius_bottom_right = 10
corner_radius_bottom_left = 10

[node name="World" type="Node3D" node_paths=PackedStringArray("player")]
script = ExtResource("1_sttxf")
player = NodePath("Player")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_mnx18")

[node name="SunLight" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866025, -0.433013, 0.25, 0, 0.5, 0.866025, -0.5, 0.75, -0.433013, 0, 0, 0)
light_color = Color(0.984131, 0.84375, 1, 1)
light_energy = 0.1
shadow_enabled = true

[node name="GridLight" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0)
light_color = Color(0.900806, 0.126572, 0.925781, 1)
light_energy = 1.2
sky_mode = 1

[node name="Floor" type="StaticBody3D" parent="."]
visible = false
collision_mask = 7

[node name="MeshInstance3D" type="MeshInstance3D" parent="Floor"]
material_override = SubResource("ShaderMaterial_85ufv")
mesh = SubResource("PlaneMesh_j40xo")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Floor"]
shape = SubResource("ConvexPolygonShape3D_70m37")
disabled = true

[node name="Player" parent="." instance=ExtResource("2_ho05h")]

[node name="Pins" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -28.9389, 0, 0)

[node name="Pin" parent="Pins" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.259265, 0, 0)

[node name="Pin2" parent="Pins" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.259266, 0, 0.8)

[node name="Pin3" parent="Pins" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.259266, 0, -0.8)

[node name="Pin4" parent="Pins" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.658758, 0, 0)

[node name="Pin5" parent="Pins" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.658758, 0, 0.8)

[node name="Pin6" parent="Pins" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.658758, 0, -0.8)

[node name="Pins2" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -22.3389, 0, 4.13797)

[node name="Pin" parent="Pins2" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.259265, 0, 0)

[node name="Pin2" parent="Pins2" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.259266, 0, 0.8)

[node name="Pin3" parent="Pins2" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.259266, 0, -0.8)

[node name="Pin4" parent="Pins2" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.658758, 0, 0)

[node name="Pin5" parent="Pins2" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.658758, 0, 0.8)

[node name="Pin6" parent="Pins2" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.658758, 0, -0.8)

[node name="Pins3" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -49.3389, 0, -5.80185)

[node name="Pin" parent="Pins3" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.259265, 0, 0)

[node name="Pin2" parent="Pins3" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.259266, 0, 0.8)

[node name="Pin3" parent="Pins3" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.259266, 0, -0.8)

[node name="Pin4" parent="Pins3" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.658758, 0, 0)

[node name="Pin5" parent="Pins3" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.658758, 0, 0.8)

[node name="Pin6" parent="Pins3" instance=ExtResource("3_d8a7j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.658758, 0, -0.8)

[node name="UI" type="CanvasLayer" parent="."]
script = ExtResource("5_2gcxh")

[node name="MarginContainer" type="MarginContainer" parent="UI"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
theme = SubResource("Theme_vgjns")
theme_override_constants/margin_left = 25
theme_override_constants/margin_top = 25
theme_override_constants/margin_right = 25
theme_override_constants/margin_bottom = 25

[node name="VBoxContainer" type="VBoxContainer" parent="UI/MarginContainer"]
layout_mode = 2

[node name="ScoreRow" type="HSplitContainer" parent="UI/MarginContainer/VBoxContainer"]
layout_mode = 2

[node name="ScoreLabel" type="Label" parent="UI/MarginContainer/VBoxContainer/ScoreRow"]
layout_mode = 2
size_flags_horizontal = 0
size_flags_vertical = 0
theme_override_font_sizes/font_size = 25
text = "Score: "

[node name="ScoreValue" type="Label" parent="UI/MarginContainer/VBoxContainer/ScoreRow"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 0
size_flags_vertical = 0
theme_override_font_sizes/font_size = 25
text = "0"

[node name="ComboRow" type="HSplitContainer" parent="UI/MarginContainer/VBoxContainer"]
layout_mode = 2

[node name="ComboLabel" type="Label" parent="UI/MarginContainer/VBoxContainer/ComboRow"]
visible = false
layout_mode = 2
size_flags_horizontal = 0
size_flags_vertical = 0
theme_override_font_sizes/font_size = 25
text = "COMBO"

[node name="ComboValue" type="Label" parent="UI/MarginContainer/VBoxContainer/ComboRow"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 0
size_flags_vertical = 0
theme_override_font_sizes/font_size = 25
text = "STRIKE"

[node name="TimerSlider" type="ProgressBar" parent="UI"]
unique_name_in_owner = true
anchors_preset = -1
anchor_top = 0.16
anchor_right = 0.208
anchor_bottom = 0.21
offset_left = 24.0
offset_top = 8.31999
offset_right = -23.616
offset_bottom = -16.08
size_flags_horizontal = 3
size_flags_vertical = 4
theme_override_styles/background = SubResource("StyleBoxFlat_pic8n")
theme_override_styles/fill = SubResource("StyleBoxFlat_dnylh")
value = 17.4
show_percentage = false

[node name="GridMap" type="GridMap" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.905, 0)
mesh_library = ExtResource("7_uebtx")
data = {
"cells": PackedInt32Array(0, 0, 0, 0, 65521, 0, 65521, 65521, 2, 65506, 65521, 1, 65506, 0, 0, 65521, 0, 0, 0, 15, 1441794, 65521, 15, 1048578, 65506, 15, 1048577, 15, 0, 2, 15, 15, 655362, 15, 65521, 655360, 15, 65506, 655360, 0, 65506, 655360, 65521, 65506, 655360, 65506, 65506, 655360, 15, 30, 655360, 0, 30, 655360, 65521, 30, 655360, 65506, 30, 655360, 65491, 65506, 655360, 65491, 65521, 655360, 65491, 0, 655360, 65491, 15, 655360, 65491, 30, 655360)
}
